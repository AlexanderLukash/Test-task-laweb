import logging
from datetime import datetime

from aiogram import Router
from aiogram.types import Message

from services.users.users import UserManager

from bot.utils.constants import profile_message


profile_users_router = Router()
logger = logging.getLogger(__name__)


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î –æ–ø—Ü—ñ—é "–ü—Ä–æ—Ñ—ñ–ª—å"
@profile_users_router.message(lambda message: message.text == "ü§µ –ü—Ä–æ—Ñ—ñ–ª—å")
async def profile_handler(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
    user_manager = UserManager()
    user_data = user_manager.get_user_info(message.from_user.id)
    if user_data:
        registration_date = user_data.get("registration_date")
        status = user_data.get("status", "N/A")
        total_applications_sent = user_data.get("applications_sent")
        days_since_registration = (
            datetime.now() - datetime.fromisoformat(registration_date)
        ).days
        await message.answer(
            text=profile_message(
                user_id=message.from_user.id,
                translated_status=status,
                total_applications_sent=total_applications_sent,
                days_since_registration=days_since_registration,
            ),
        )
    else:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start")
