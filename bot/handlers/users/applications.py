import asyncio
import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from services.requests.request import RequestManager
from services.requests.utils import (
    extract_domain,
    is_valid_url,
)
from services.users.users import UserManager

from bot.keyboards.reply import (
    applications_main_menu_keyboard,
    applications_start_cancel_keyboard,
    create_duration_keyboard,
    frequency_keyboard,
)
from bot.notificator import notify_user_completion
from bot.utils.states import StartApplicationState


applications_user_router = Router()
logger = logging.getLogger(__name__)
request_manager = RequestManager()
user_manager = UserManager()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UserManager

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
active_tasks = {}


@applications_user_router.message(lambda message: message.text == "üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫")
async def applications_menu_handler(message: Message):
    logger.info(f"User {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –º–µ–Ω—é –∑–∞—è–≤–æ–∫")
    await message.answer(
        text="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∑–∞—è–≤–∫–∞–º–∏.",
        reply_markup=applications_main_menu_keyboard,
    )


@applications_user_router.message(
    lambda message: message.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É ‚ùå"
    or message.text == "–í –º–µ–Ω—é –∑–∞—è–≤–æ–∫",
)
async def back_to_applications_menu(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –º–µ–Ω—é –∑–∞—è–≤–æ–∫")
    await state.clear()
    await applications_menu_handler(message)


@applications_user_router.message(
    lambda message: message.text == "‚ùå –ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É",
)
async def stop_application_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"User {user_id} –æ–±—Ä–∞–≤ '–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É'")
    data = await state.get_data()
    url = data.get("url")

    # –ó—É–ø–∏–Ω—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ
    task = active_tasks.get((user_id, url))
    if task and not task.done():
        task.cancel()  # –°–∫–∞—Å–æ–≤—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        successful_requests = request_manager.get_successful_requests(user_id, url)
        await notify_user_completion(user_id, successful_requests, url)
        await message.answer("‚õîÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –∑—É–ø–∏–Ω–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")

    # –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é —ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
    user_manager.remove_active_session(user_id, url)
    active_tasks.pop((user_id, url), None)
    await state.clear()
    await applications_menu_handler(message)


@applications_user_router.message(
    lambda message: message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É üöÄ",
)
async def initiate_request(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"User {user_id} –æ–±—Ä–∞–≤ '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫'")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —ñ –ª—ñ–º—ñ—Ç—É
    user_data = user_manager.get_user_info(user_id)
    applications_sent = user_data.get("applications_sent")

    if user_data.get("status") == "demo":
        if user_manager.get_active_session_count(user_id) >= 1:
            await message.answer(
                "‚ùå –î–ª—è –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ 1 –∑–∞—è–≤–∫–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.",
            )
            return
        if user_manager.is_demo_limit_reached(user_id):
            await message.answer(
                "‚ùå –í–∏ –≤–∂–µ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞—è–≤–æ–∫. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            )
            return

    if (
        user_data.get("status") == "unlim"
        and user_manager.get_active_session_count(user_id) >= 3
    ):
        await message.answer("‚ùå –î–ª—è –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ 3 –∑–∞—è–≤–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.")
        return

    # –ó–∞–ø–∏—Ç URL
    if user_data.get("status") == "demo":
        requests_to_send = 50 - applications_sent
        await message.answer(
            text=f"üåê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ –¥–æ {requests_to_send} –∑–∞—è–≤–æ–∫. –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:",
            reply_markup=applications_start_cancel_keyboard,
        )
    else:
        await message.answer(
            text="üåê –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç:",
            reply_markup=applications_start_cancel_keyboard,
        )
    await state.set_state(StartApplicationState.url)


@applications_user_router.message(StartApplicationState.url)
async def handle_url(message: Message, state: FSMContext):
    url = message.text
    domain = extract_domain(url)
    logger.info(f"User {message.from_user.id} –≤–≤—ñ–≤ URL: {url}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–º–µ–Ω—É –Ω–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if any(domain in data.whitelist for data in user_manager.load_users().values()):
        await message.answer(
            f"‚ùå –î–æ–º–µ–Ω '{domain}' –≤–∂–µ —ñ—Å–Ω—É—î —É –≤–∞–π—Ç–ª—ñ—Å—Ç—ñ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –¥–æ–º–µ–Ω.",
        )
        return

    if is_valid_url(url):
        await state.update_data(url=url)
        await state.set_state(StartApplicationState.delay)
        await message.answer(
            "üï∞ –Ø–∫ —à–≤–∏–¥–∫–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?",
            reply_markup=frequency_keyboard,
        )
    else:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç")


@applications_user_router.message(StartApplicationState.delay)
async def handle_frequency_and_duration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_manager.get_user_info(user_id)
    logger.info(f"User {user_id} –æ–±—Ä–∞–≤ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫: {message.text}")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∏
    if message.text in [
        "–ë–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏ üöÄ",
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ ‚è≥",
        "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Ö–≤–∏–ª–∏–Ω ‚åõ",
        "1 –∑–∞—è–≤–∫–∞ –≤ 60 —Ö–≤–∏–ª–∏–Ω ‚åõ",
    ]:
        delay = message.text
        await state.update_data(delay=delay)

        if user_data.get("status") == "demo":
            await message.answer(
                "üí´ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–Ω–∞. –í–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ —É –¥–µ–º–æ —Å—Ç–∞—Ç—É—Å—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.",
            )
            data = await state.get_data()
            website_url = data.get("url")
            await state.clear()
            if user_manager.add_active_session(user_id, website_url):
                await message.answer(
                    f"üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–∞–π—Ç: {website_url} —Ä–æ–∑–ø–æ—á–∞—Ç–∞.",
                    reply_markup=applications_main_menu_keyboard,
                )

                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü–∏–∫–ª—É –∑–∞–ø–∏—Ç—ñ–≤
                task = asyncio.create_task(
                    request_manager.request_loop(
                        user_id,
                        website_url,
                        delay,
                        duration=None,
                    ),
                )
                active_tasks[(user_id, website_url)] = task
                return
            else:
                await message.answer(
                    "‚ùå –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.",
                    reply_markup=applications_main_menu_keyboard,
                )
                return

        await state.set_state(StartApplicationState.duration)
        await message.answer(
            "‚è≥ –Ø–∫ –¥–æ–≤–≥–æ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è –∑–∞—è–≤–∫–∏?",
            reply_markup=create_duration_keyboard(
                True if user_manager.get_user_status(user_id) == "admin" else False,
            ),
        )


@applications_user_router.message(StartApplicationState.duration)
async def handle_duration(message: Message, state: FSMContext):
    user_id = message.from_user.id
    duration_mapping = {
        "1 —Ö–≤–∏–ª–∏–Ω–∞ ‚è≥": 60,
        "15 —Ö–≤–∏–ª–∏–Ω ‚è≥": 15 * 60,
        "30 —Ö–≤–∏–ª–∏–Ω ‚è≥": 30 * 60,
        "1 –≥–æ–¥–∏–Ω–∞ ‚è≥": 60 * 60,
        "3 –≥–æ–¥–∏–Ω–∏ ‚è≥": 3 * 60 * 60,
        "–ù–µ–æ–±–º–µ–∂–µ–Ω–æ ‚è≥": None,
    }

    duration = duration_mapping.get(message.text)
    if duration is None:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑ –º–µ–Ω—é.",
        )
        return

    # –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª—É –∑–∞–ø–∏—Ç—ñ–≤ –∑ –∑–∞–¥–∞–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
    data = await state.get_data()
    delay = data.get("delay")
    website_url = data.get("url")
    await state.clear()
    if user_manager.add_active_session(user_id, website_url):
        await message.answer(
            f"üöÄ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–∞–π—Ç: {website_url} —Ä–æ–∑–ø–æ—á–∞—Ç–∞.",
            reply_markup=applications_main_menu_keyboard,
        )

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        task = asyncio.create_task(
            request_manager.request_loop(user_id, website_url, delay, duration),
        )
        active_tasks[(user_id, website_url)] = task
        return
    else:
        await message.answer(
            "‚ùå –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω—É —Å–µ—Å—ñ—é –¥–ª—è —Ü—å–æ–≥–æ —Å–∞–π—Ç—É.",
            reply_markup=applications_main_menu_keyboard,
        )
        return


@applications_user_router.message(lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó üïú")
async def show_active_sessions(message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó")
    user_active_sessions = [
        (user, url) for (user, url) in active_tasks.keys() if user == user_id
    ]

    if user_active_sessions:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=url, callback_data=f"stop_session:{url}")]
                for _, url in user_active_sessions
            ],
        )
        await message.answer("–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π.")


@applications_user_router.callback_query(
    lambda callback: callback.data.startswith("stop_session:"),
)
async def stop_session_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    url = callback_query.data.split("stop_session:")[1]
    logger.info(f"User {user_id} –∑—É–ø–∏–Ω—è—î —Å–µ—Å—ñ—é –¥–ª—è URL: {url}")

    task_key = (user_id, url)
    task = active_tasks.get(task_key)

    if task and not task.done():
        successful_requests = request_manager.get_successful_requests(user_id, url)
        await notify_user_completion(user_id, successful_requests, url)
        task.cancel()
        active_tasks.pop(task_key, None)
        user_manager.remove_active_session(user_id, url)
        await callback_query.message.answer(
            f"‚õîÔ∏è –°–µ—Å—ñ—è –¥–ª—è {url} –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–∞.",
            reply_markup=applications_main_menu_keyboard,
        )
    else:
        await callback_query.message.answer("‚ùå –°–µ—Å—ñ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –≤–∂–µ –±—É–ª–∞ –∑—É–ø–∏–Ω–µ–Ω–∞.")

    await callback_query.message.delete()
