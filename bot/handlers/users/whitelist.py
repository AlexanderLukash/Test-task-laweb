import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from services.requests.utils import extract_domain
from services.users.users import UserManager

from bot.filters.demo import DemoFilter
from bot.keyboards.reply import (
    generate_domain_keyboard,
    return_white_list_menu_keyboard,
    whitelist_keyboard,
)
from bot.utils.states import (
    AddDomainToWhitelistState,
    DeleteDomainFromWhitelistState,
)


whitelist_user_router = Router()
logger = logging.getLogger(__name__)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ–∫–∞–∑—É –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞
@whitelist_user_router.message(DemoFilter(command="üîò Whitelist"))
async def show_whitelist_menu(message: Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
    await message.answer(
        text="–í—ñ—Ç–∞—é —É –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç—É! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=whitelist_keyboard,
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞
@whitelist_user_router.message(lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")
async def back_to_whitelist_menu(message: Message, state: FSMContext):
    await state.clear()
    await show_whitelist_menu(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω—É –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
@whitelist_user_router.message(DemoFilter(command="–î–æ–¥–∞—Ç–∏ –¥–æ–º–µ–Ω"))
async def request_domain(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ—á–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ–º–µ–Ω –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
    user_manager = UserManager()

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = user_manager.get_user_info(message.from_user.id)

    if not user_data:
        await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –Ω–∞ –¥–æ–º–µ–Ω–∏
    user_domains = user_data.get("whitelist", [])
    if user_data.get("status") != "admin" and len(user_domains) >= 3:
        await message.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 3-—Ö –¥–æ–º–µ–Ω—ñ–≤.")
        return
    await state.set_state(AddDomainToWhitelistState.domain)
    await message.answer(
        text="üì© –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç, –¥–æ–º–µ–Ω —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏.",
        reply_markup=return_white_list_menu_keyboard,
    )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@whitelist_user_router.message(AddDomainToWhitelistState.domain)
async def add_domain(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_domain = message.text
    user_manager = UserManager()

    domain = extract_domain(user_domain)
    if domain:
        if domain not in user_manager.get_user_whitelist(user_id):
            success = user_manager.add_to_whitelist(user_id, domain)
            if success:
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–≤ –¥–æ–º–µ–Ω {domain} –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞")
                await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
            else:
                await message.answer(
                    "‚ùå –õ—ñ–º—ñ—Ç –¥–æ–º–µ–Ω—ñ–≤ –¥–æ—Å—è–≥–Ω—É—Ç–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                )
        else:
            await message.answer("‚ùå –¶–µ–π –¥–æ–º–µ–Ω –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL.")

    await state.clear()
    await show_whitelist_menu(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –¥–æ–º–µ–Ω—ñ–≤ —É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ
@whitelist_user_router.message(DemoFilter(command="–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤"))
async def list_domains(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")
    user_id = message.from_user.id
    user_manager = UserManager()
    user_domains = user_manager.get_user_whitelist(user_id)

    if not user_domains:
        await message.answer("üìã –í–∞—à –≤–∞–π—Ç–ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        domain_keyboard = generate_domain_keyboard(user_domains)
        await state.set_state(DeleteDomainFromWhitelistState.domain)
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–µ–Ω, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:",
            reply_markup=domain_keyboard,
        )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–º–µ–Ω—É –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
@whitelist_user_router.message(DeleteDomainFromWhitelistState.domain)
async def delete_domain(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_manager = UserManager()
    domain_to_remove = message.text

    if user_manager.remove_from_whitelist(user_id, domain_to_remove):
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–∏–≤ –¥–æ–º–µ–Ω {domain_to_remove} –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞",
        )
        await message.answer(f"‚úÖ –î–æ–º–µ–Ω {domain_to_remove} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ.")

    await state.clear()
    await list_domains(message, state)
