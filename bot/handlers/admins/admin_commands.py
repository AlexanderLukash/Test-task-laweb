import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from services.users.users import UserManager

from bot.filters.admin import AdminFilter
from bot.keyboards.reply import (
    cancel_button,
    change_status_keyboard,
    create_start_keyboard,
)
from bot.utils.states import ChangeUserStatusState


admin_commands_router = Router()
admin_commands_router.message.filter(AdminFilter())
logger = logging.getLogger(__name__)


@admin_commands_router.message(lambda message: message.text == "üí† –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å")
async def change_status_handler(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å'")
    await state.set_state(ChangeUserStatusState.id)
    await message.answer(
        text="üë§ –í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=cancel_button,
    )


@admin_commands_router.message(lambda message: message.text == "‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
async def cancel_handler(message: Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤—ñ–¥–º—ñ–Ω–∏–≤ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É.")
    await state.clear()
    await message.answer(
        text="üñá –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞.",
        reply_markup=create_start_keyboard(True),
    )


@admin_commands_router.message(ChangeUserStatusState.id)
async def set_user_id_handler(message: Message, state: FSMContext):
    user_manager: UserManager = UserManager()
    users = user_manager.load_users()
    target_user_id = message.text.strip()

    if target_user_id.isdigit() and int(target_user_id) in users:
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–∏–±—Ä–∞–≤ Telegram ID {target_user_id} –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É.",
        )
        user_status = user_manager.get_user_status(user_id=int(target_user_id))
        await state.update_data(id=int(target_user_id))
        await state.set_state(ChangeUserStatusState.status)
        await message.answer(
            text=f"üö¶ –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(Current Status:{user_status}):",
            reply_markup=change_status_keyboard,
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Telegram ID.",
        )


@admin_commands_router.message(ChangeUserStatusState.status)
async def handle_new_status_selection(message: Message, state: FSMContext):
    user_manager: UserManager = UserManager()
    new_status = message.text.strip()

    if new_status in ["demo", "unlim", "admin"]:
        data = await state.get_data()
        target_user_id = data.get("id")
        logger.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–º—ñ–Ω–∏–≤ —Å—Ç–∞—Ç—É—Å –Ω–∞ {new_status} –¥–ª—è Telegram ID {target_user_id}.",
        )
        user_manager.update_user_status(
            user_id=target_user_id,
            new_status=new_status,
        )
        await message.answer(
            text=f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {target_user_id} –∑–º—ñ–Ω–µ–Ω–æ "
            f"–Ω–∞ {new_status}.",
            reply_markup=create_start_keyboard(True),
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.",
        )
