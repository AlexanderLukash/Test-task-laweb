import asyncio
import logging
import random
import time
from typing import (
    Optional,
    Tuple,
)
from urllib.parse import (
    urlsplit,
    urlunsplit,
)

import aiohttp
from aiohttp import (
    ClientSession,
    TCPConnector,
)
from bs4 import BeautifulSoup
from services.requests.exceptions.requests import (
    FormNotFoundException,
    ProxyErrorException,
    SiteUnavailableException,
)
from services.requests.proxy_manager import ProxyManager
from services.requests.utils import (
    generate_name,
    generate_phone_number,
)
from services.users.users import UserManager

from bot.notificator import notify_user_completion


logger = logging.getLogger(__name__)


class RequestManager:
    proxy_manager: ProxyManager = ProxyManager()
    user_manager: UserManager = UserManager()

    # –î–æ–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞—è–≤–æ–∫
    successful_requests = {}  # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞—è–≤–æ–∫ { (user_id, url): count }

    def increment_successful_requests(self, user_id: int, url: str):
        """–ó–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ URL."""
        if (user_id, url) not in self.successful_requests:
            self.successful_requests[(user_id, url)] = 0
        self.successful_requests[(user_id, url)] += 1

    def get_successful_requests(self, user_id: int, url: str) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ URL."""
        return self.successful_requests.get((user_id, url), 0)

    def reset_successful_requests(self, user_id: int, url: str):
        """–°–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ URL."""
        self.successful_requests.pop((user_id, url), None)

    async def send_request(
        self,
        session: ClientSession,
        proxy_url: Optional[str],
        url: str,
        headers: dict,
    ) -> Tuple[
        Optional[str],
        Optional[dict],
    ]:
        """–ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–∏–Ω GET-–∑–∞–ø–∏—Ç —ñ —Ñ–æ—Ä–º—É —Ä–æ–∑–±–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ POST-–∑–∞–ø–∏—Ç—É."""
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è GET-–∑–∞–ø–∏—Ç—É –Ω–∞: {url}")

        try:
            async with session.get(url, proxy=proxy_url, headers=headers) as response:
                if response.status != 200:
                    logger.error(f"Failed to GET: {url} with status: {response.status}")
                    raise SiteUnavailableException()

                html = await response.text()
                soup = BeautifulSoup(html, "html.parser")
                form = soup.find("form")

                if not form:
                    raise FormNotFoundException()

                action = form.get("action")
                if action:
                    action = self.form_action_url(url, action)
                data = self.extract_form_data(form)

                return action, data
        except aiohttp.ClientProxyConnectionError:
            logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä–∞.")
            raise ProxyErrorException()
        except aiohttp.ClientError as e:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise SiteUnavailableException()

    @staticmethod
    def form_action_url(base_url: str, action: str) -> str:
        """Formulates the URL for form action."""
        if not action.startswith("http"):
            split_url = urlsplit(base_url)
            base_url_without_query = urlunsplit(
                (
                    split_url.scheme,
                    split_url.netloc,
                    split_url.path.rstrip("/") + "/",
                    "",
                    "",
                ),
            )
            action = f"{base_url_without_query}{action.lstrip('/')}"
        logger.info(f"–°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞ URL-–∞–¥—Ä–µ—Å–∞ –¥—ñ—ó: {action}")
        return action

    @staticmethod
    def extract_form_data(form) -> dict:
        """–í–∏—Ç—è–≥—É—î –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ POST"""
        data = {}
        inputs = form.find_all("input")
        for input_tag in inputs:
            input_name = input_tag.get("name")
            input_type = input_tag.get("type")

            if input_type == "name" or input_name == "name":
                data[input_name] = generate_name()
            elif input_type == "tel" or input_name == "phone" or input_name == "tel":
                data[input_name] = generate_phone_number()
            elif input_type == "checkbox":
                data[input_name] = "on"

        selects = form.find_all("select")
        for select in selects:
            select_name = select.get("name")
            options = select.find_all("option")
            valid_options = [option for option in options if option.get("value")]
            if valid_options:
                selected_option = random.choice(valid_options).get("value")
                data[select_name] = selected_option

        logger.info(f"–î–∞–Ω—ñ, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏: {data}")
        return data

    async def send_form(
        self,
        session: ClientSession,
        action: str,
        data: dict,
        proxy_url: Optional[str],
    ) -> Optional[str]:
        """–°–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ä–º—É –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
        for attempt in range(3):
            async with session.post(
                action,
                data=data,
                proxy=proxy_url,
            ) as post_response:
                if post_response.status == 200:
                    logger.info(f"–ó–∞–ø–∏—Ç –¥–æ {action} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
                    return None  # –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {post_response.status}")
                    if attempt < 2:
                        await asyncio.sleep(10)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ä–º—É."

    async def request_loop(
        self,
        user_id: int,
        url: str,
        frequency: str,
        duration: Optional[int] = None,
    ) -> None:
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –∑–∞–ø–∏—Ç—ñ–≤"""
        delay_mapping = {
            "–ë–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏ üöÄ": 0,
            "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Å–µ–∫—É–Ω–¥ ‚è≥": 10,
            "1 –∑–∞—è–≤–∫–∞ –≤ 10 —Ö–≤–∏–ª–∏–Ω ‚åõ": 600,
            "1 –∑–∞—è–≤–∫–∞ –≤ 60 —Ö–≤–∏–ª–∏–Ω ‚åõ": 3600,
        }
        delay = delay_mapping.get(frequency, 0)
        user_info = self.user_manager.get_user_info(user_id)

        requests_to_send = (
            50 - user_info["applications_sent"]
            if user_info.get("status") == "demo"
            else float("inf")
        )
        end_time = time.time() + duration if duration else None

        while requests_to_send > 0:
            if end_time and time.time() >= end_time:
                break

            proxy_url = self.proxy_manager.get_proxy()
            logger.info(
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø—Ä–æ–∫—Å—ñ: {proxy_url}"
                if proxy_url
                else "–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å—ñ.",
            )

            async with ClientSession(connector=TCPConnector(ssl=False)) as session:
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
                }

                try:
                    action, data = await self.send_request(
                        session,
                        proxy_url,
                        url,
                        headers,
                    )
                    if not action or data is None:
                        break  # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ –±–µ–∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏

                    error_message = await self.send_form(
                        session,
                        action,
                        data,
                        proxy_url,
                    )
                    if error_message:
                        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏, –∑—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤.")
                        break

                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∑–∞—è–≤–∫–∏
                    self.user_manager.increment_applications_sent(user_id)
                    self.increment_successful_requests(
                        user_id,
                        url,
                    )  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞—è–≤–æ–∫

                except FormNotFoundException:
                    logger.error("–§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ. –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤.")
                    break
                except SiteUnavailableException:
                    logger.error("–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏.")
                    await asyncio.sleep(5)
                    continue
                except ProxyErrorException:
                    logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–∫—Å—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑ –Ω–æ–≤–∏–º –ø—Ä–æ–∫—Å—ñ.")
                    continue

            # –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ñ
            if user_info.get("status") == "demo":
                requests_to_send -= 1

            await asyncio.sleep(delay)

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
        self.user_manager.remove_active_session(user_id, url)
        self.user_manager.save_users()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ü–∏–∫–ª—É
        successful_requests = self.get_successful_requests(user_id, url)
        await notify_user_completion(user_id, successful_requests, url)

        # –û—á–∏—â–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        self.reset_successful_requests(user_id, url)

        logger.info(
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª –∑–∞–ø–∏—Ç—É –¥–ª—è user_id: {user_id}. –í—Å—å–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: {user_info['applications_sent']}.",
        )
